// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActivityStatus {
  upcoming
  ongoing
  completed
  cancelled
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Custom fields
  bio           String?
  location      String?
  interests     String[]
  
  // Relations
  createdActivities Activity[]       @relation("CreatedActivities")
  participations    Participation[]

  // Add comments relation
  comments      Comment[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Activity Hub Models
model Activity {
  id               String   @id @default(cuid())
  title            String
  description      String
  startDate        DateTime
  endDate          DateTime
  location         String
  maxParticipants  Int
  currentParticipants Int   @default(0)
  status           ActivityStatus @default(upcoming)
  
  // Relations
  creatorId        String
  creator          User     @relation("CreatedActivities", fields: [creatorId], references: [id])
  categoryId       String
  category         Category @relation(fields: [categoryId], references: [id])
  participants     Participation[]

  // Metadata
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Future features
  isPrivate        Boolean  @default(false)
  isPaid           Boolean  @default(false)
  price            Float?
  images           String[]

  // Add comments relation
  comments         Comment[]
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  activities  Activity[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([parentId])
}

model Participation {
  id         String   @id @default(cuid())
  status     String   @default("confirmed")
  joinedAt   DateTime @default(now())
  
  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id])

  // Future features
  attendance Boolean?
  rating     Int?
  review     String?

  @@unique([userId, activityId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityId String
  activity  Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  // Optional parent comment for replies
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")

  @@index([userId])
  @@index([activityId])
  @@index([parentId])
}
